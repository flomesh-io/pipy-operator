apiVersion: flomesh.io/v1alpha1
kind: Proxy
metadata:
  name: pipy-standalone-014
spec:
  mode: Standalone
  tplMode: Raw
  replicas: 1
  image: flomesh/pipy:latest
  port: 8080
  config:
    config.cfg: |
      pipy
        #
        # For debugging purpose, so we can see Dubbo messages in JSON.
        #
        pipeline :20881
          decode-dubbo
            prefix = a
          clone
            to = print-json
          encode-dubbo
            prefix = a
          proxy-tcp
            to = 127.0.0.1:20880
          decode-dubbo
            prefix = b
          clone
            to = print_json
          encode-dubbo
            prefix = b

        pipeline print-json
          decode-hessian2
          encode-json
            indent = 2
          print
            format = raw
          dummy

        #
        # Translate HTTP messages in JSON to Dubbo messages
        #

        pipeline :6000
          decode-http-request
            prefix = http
          decode-json
          script
            source = dispatch.js
          proxy
            to = ${http.status}

        pipeline 404
          message
            content = { .result "No route" }
          encode-json
          encode-http-response
            prefix = http

        pipeline 200
          proxy
            to = ${pipeline}
          encode-hessian2
          encode-dubbo
          proxy-tcp
            to = 127.0.0.1:20880
          decode-dubbo
          decode-hessian2
          filter
            path = /[1]
            to = result
          message
            content = { .result null }
          replace
            path = /result
            from = result
            default = null
          encode-json
          encode-http-response
            prefix = http
            headers.content-type = application/json

        pipeline sayHello
          filter
            path = /data
            to = data
          message
            content = [
              "2.0.2"
              "org.apache.dubbo.samples.api.GreetingService"
              "1.0.0"
              "sayHello"
              "Ljava/lang/String;"
              null { } ]
          replace
            path = /[5]
            from = data
            default = null

        pipeline sayHelloPerson
          filter
            path = /data
            to = data
          message
            content = [
              "2.0.2"
              "org.apache.dubbo.samples.api.GreetingService"
              "1.0.0"
              "sayHelloPerson"
              "Lorg/apache/dubbo/samples/api/GreetingService$Person;"
              null { } ]
          replace
            path = /[5]
            from = data
            default = null

    dispatch.js: |
      import ROUTES from './routes.js';

      export default (output, context) => (
        input => {

          // Find route on every message start
          if (input instanceof Event &&
              input.type === 'messagestart'
          ) {
            const path = context.get('http.path');
            const target = ROUTES[path];
            context.set('http.status', target ? '200' : '404');
            context.set('pipeline', target);
          }

          // Pass down everything
          output(input);
        }
      );
    routes.js: |
      export default {
        '/sayHello'      : 'sayHello',
        '/sayHelloPerson': 'sayHelloPerson',
      }
