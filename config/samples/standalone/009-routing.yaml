apiVersion: flomesh.io/v1
kind: Proxy
metadata:
  name: pipy-standalone-009
spec:
  mode: Standalone
  tplMode: Raw
  replicas: 1
  image: flomesh/pipy:latest
  port: 6000
  config:
    config.cfg: |
      pipy
        pipeline :6000
          decode-http-request
            prefix = a

          # This script controls variables ${pipeline} and ${target}
          script
            source = dispatch.js

          # Forwards to pipeline 'up' or '404'
          proxy
            to = ${pipeline}

        #
        # When route is found, forwards to ${target}
        #

        pipeline up
          encode-http-request
            prefix = a
          proxy-tcp
            to = ${target}

        #
        # When route is not found, responds with 404
        #

        pipeline 404
          hello
            message = No route\n
          encode-http-response
            prefix = a
            status = Not Found
            status_code = 404

        #
        # Mock service on port 8000
        #

        pipeline :8000
          decode-http-request
            prefix = a
          hello
            message = Hello from service 8000\n
          encode-http-response
            prefix = a

        #
        # Mock service on port 8001
        #

        pipeline :8001
          decode-http-request
            prefix = a
          hello
            message = Hello from service 8001\n
          encode-http-response
            prefix = a

        #
        # Mock service on port 8002
        #

        pipeline :8002
          decode-http-request
            prefix = a
          hello
            message = Hello from service 8002\n
          encode-http-response
            prefix = a
    dispatch.js: |
      import ROUTES from './routes.js';

      export default (output, context) => (
        input => {

          // Find route on every message start
          if (input instanceof Event &&
              input.type === 'messagestart'
          ) {
            const path = context.get('a.path');
            const target = ROUTES[path];
            if (target === undefined) {
              context.set('pipeline', '404');
            } else {
              context.set('pipeline', 'up');
              context.set('target', target);
            }
          }

          // Pass down everything
          output(input);
        }
      );
    routes.js: |
      export default {
        '/hello'   : '127.0.0.1:8000',
        '/hello/0' : '127.0.0.1:8000',
        '/hello/1' : '127.0.0.1:8001',
        '/hello/2' : '127.0.0.1:8002',
      }

